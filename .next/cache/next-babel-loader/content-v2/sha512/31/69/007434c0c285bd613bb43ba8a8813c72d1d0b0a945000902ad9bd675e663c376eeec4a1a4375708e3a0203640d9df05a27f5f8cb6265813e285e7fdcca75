{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"C:/Users/Rowen/Desktop/expo/fscit-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Rowen\\\\Desktop\\\\expo\\\\fscit-nextjs\\\\pages\\\\warehouse-management\\\\customer\\\\CustomerForm.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport Controls from \"../../../components/controls/Controls\";\nimport { useForm, Form } from \"../../../components/useForm\";\nvar initialFValues = {\n  id: \"\",\n  customer_code: \"\",\n  customer_name: \"\",\n  status: \"0\",\n  freshness_requirement: \"\",\n  freshness_unit: \"\",\n  customer_category: \"\"\n};\nexport default function CustomerForm(props) {\n  _s();\n\n  var addOrEdit = props.addOrEdit,\n      recordForEdit = props.recordForEdit;\n\n  var validate = function validate() {\n    var fieldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values;\n\n    var temp = _objectSpread({}, errors);\n\n    if (\"customer_code\" in fieldValues) temp.customer_code = fieldValues.customer_code ? \"\" : \"This field is required.\";\n    if (\"customer_name\" in fieldValues) temp.customer_name = fieldValues.customer_name ? \"\" : \"This field is required.\";\n    if (\"freshness_requirement\" in fieldValues) temp.freshness_requirement = fieldValues.freshness_requirement ? \"\" : \"This field is required.\";\n    if (\"freshness_unit\" in fieldValues) temp.freshness_unit = fieldValues.freshness_unit ? \"\" : \"This field is required.\";\n    if (\"customer_category\" in fieldValues) temp.customer_category = fieldValues.customer_category ? \"\" : \"This field is required.\";\n    setErrors(_objectSpread({}, temp));\n    if (fieldValues == values) return Object.values(temp).every(function (x) {\n      return x == \"\";\n    });\n  };\n\n  var _useForm = useForm(initialFValues, true, validate),\n      values = _useForm.values,\n      setValues = _useForm.setValues,\n      errors = _useForm.errors,\n      setErrors = _useForm.setErrors,\n      handleInputChange = _useForm.handleInputChange,\n      resetForm = _useForm.resetForm;\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n\n    if (validate()) {\n      addOrEdit(values, resetForm);\n    }\n  };\n\n  useEffect(function () {\n    if (recordForEdit != null) setValues(_objectSpread({}, recordForEdit));\n  }, [recordForEdit]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        lg: 6,\n        sm: 6,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n          name: \"customer_code\",\n          label: \"Customer Code\",\n          value: values.customer_code,\n          onChange: handleInputChange,\n          error: errors.customer_code\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n          name: \"customer_name\",\n          label: \"Customer Name\",\n          value: values.customer_name,\n          onChange: handleInputChange,\n          error: errors.customer_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n          type: \"number\",\n          label: \"Freshness Requirement %\",\n          name: \"freshness_requirement\",\n          value: values.freshness_requirement,\n          onChange: handleInputChange,\n          error: errors.freshness_requirement\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        lg: 6,\n        sm: 6,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n          label: \"Freshness Unit\",\n          name: \"freshness_unit\",\n          value: values.freshness_unit,\n          onChange: handleInputChange,\n          error: errors.freshness_unit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n          label: \"Customer Category\",\n          name: \"customer_category\",\n          value: values.customer_category,\n          onChange: handleInputChange,\n          error: errors.customer_category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls.Checkbox, {\n          name: \"status\",\n          label: \"Status\",\n          value: values.status == \"0\" ? false : true,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Controls.Button, {\n        type: \"submit\",\n        text: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n        text: \"Reset\",\n        color: \"default\",\n        onClick: resetForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomerForm, \"sJzGov1Odg1EgrLIbXOUBBZnNQ0=\", false, function () {\n  return [useForm];\n});\n\n_c = CustomerForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerForm\");","map":{"version":3,"sources":["C:/Users/Rowen/Desktop/expo/fscit-nextjs/pages/warehouse-management/customer/CustomerForm.js"],"names":["React","useState","useEffect","Grid","Controls","useForm","Form","initialFValues","id","customer_code","customer_name","status","freshness_requirement","freshness_unit","customer_category","CustomerForm","props","addOrEdit","recordForEdit","validate","fieldValues","values","temp","errors","setErrors","Object","every","x","setValues","handleInputChange","resetForm","handleSubmit","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Controls from \"../../../components/controls/Controls\";\r\nimport { useForm, Form } from \"../../../components/useForm\";\r\n\r\nconst initialFValues = {\r\n  id: \"\",\r\n  customer_code: \"\",\r\n  customer_name: \"\",\r\n  status: \"0\",\r\n  freshness_requirement: \"\",\r\n  freshness_unit: \"\",\r\n  customer_category: \"\",\r\n};\r\n\r\nexport default function CustomerForm(props) {\r\n  const { addOrEdit, recordForEdit } = props;\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n    if (\"customer_code\" in fieldValues)\r\n      temp.customer_code = fieldValues.customer_code\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    if (\"customer_name\" in fieldValues)\r\n      temp.customer_name = fieldValues.customer_name\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    if (\"freshness_requirement\" in fieldValues)\r\n      temp.freshness_requirement = fieldValues.freshness_requirement\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n    if (\"freshness_unit\" in fieldValues)\r\n      temp.freshness_unit = fieldValues.freshness_unit\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    if (\"customer_category\" in fieldValues)\r\n      temp.customer_category = fieldValues.customer_category\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues == values) return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const { values, setValues, errors, setErrors, handleInputChange, resetForm } =\r\n    useForm(initialFValues, true, validate);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      addOrEdit(values, resetForm);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (recordForEdit != null)\r\n      setValues({\r\n        ...recordForEdit,\r\n      });\r\n  }, [recordForEdit]);\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Grid container>\r\n        <Grid item lg={6} sm={6} xs={12}>\r\n          <Controls.Input\r\n            name=\"customer_code\"\r\n            label=\"Customer Code\"\r\n            value={values.customer_code}\r\n            onChange={handleInputChange}\r\n            error={errors.customer_code}\r\n          />\r\n          <Controls.Input\r\n            name=\"customer_name\"\r\n            label=\"Customer Name\"\r\n            value={values.customer_name}\r\n            onChange={handleInputChange}\r\n            error={errors.customer_name}\r\n          />\r\n          <Controls.Input\r\n            type=\"number\"\r\n            label=\"Freshness Requirement %\"\r\n            name=\"freshness_requirement\"\r\n            value={values.freshness_requirement}\r\n            onChange={handleInputChange}\r\n            error={errors.freshness_requirement}\r\n          />\r\n        </Grid>\r\n        <Grid item lg={6} sm={6} xs={12}>\r\n          <Controls.Input\r\n            label=\"Freshness Unit\"\r\n            name=\"freshness_unit\"\r\n            value={values.freshness_unit}\r\n            onChange={handleInputChange}\r\n            error={errors.freshness_unit}\r\n          />\r\n          <Controls.Input\r\n            label=\"Customer Category\"\r\n            name=\"customer_category\"\r\n            value={values.customer_category}\r\n            onChange={handleInputChange}\r\n            error={errors.customer_category}\r\n          />\r\n          <Controls.Checkbox\r\n            name=\"status\"\r\n            label=\"Status\"\r\n            value={values.status == \"0\" ? false : true}\r\n            onChange={handleInputChange}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <div>\r\n        <Controls.Button type=\"submit\" text=\"Submit\" />\r\n        <Controls.Button text=\"Reset\" color=\"default\" onClick={resetForm} />\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}