{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rowen\\\\Desktop\\\\expo\\\\fscit-nextjs\\\\pages\\\\warehouse-management\\\\supplier-master\\\\SupplierForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport Controls from \"../../../components/controls/Controls\";\nimport { useForm, Form } from \"../../../components/useForm\";\nconst initialFValues = {\n  id: \"\",\n  supplier_code: \"\",\n  supplier_name: \"\",\n  status: \"0\",\n  supplier_category: \"\",\n  created_by: \"\",\n  updated_by: \"\"\n};\nexport default function SupplierForm(props) {\n  const {\n    addOrEdit,\n    recordForEdit\n  } = props;\n\n  const validate = (fieldValues = values) => {\n    let temp = _objectSpread({}, errors);\n\n    if (\"supplier_code\" in fieldValues) temp.supplier_code = fieldValues.supplier_code ? \"\" : \"This field is required.\";\n    if (\"supplier_name\" in fieldValues) temp.supplier_name = fieldValues.supplier_name ? \"\" : \"This field is required.\";\n    if (\"supplier_category\" in fieldValues) temp.supplier_category = fieldValues.supplier_category ? \"\" : \"This field is required.\";\n    setErrors(_objectSpread({}, temp));\n    if (fieldValues == values) return Object.values(temp).every(x => x == \"\");\n  };\n\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFValues, true, validate);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validate()) {\n      addOrEdit(values, resetForm);\n    }\n  };\n\n  useEffect(() => {\n    if (recordForEdit != null) setValues(_objectSpread({}, recordForEdit));\n  }, [recordForEdit]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        lg: 6,\n        sm: 6,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n          name: \"supplier_code\",\n          label: \"Supplier Code\",\n          value: values.supplier_code,\n          onChange: handleInputChange,\n          error: errors.supplier_code\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n          name: \"supplier_name\",\n          label: \"Supplier Name\",\n          value: values.supplier_name,\n          onChange: handleInputChange,\n          error: errors.supplier_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        lg: 6,\n        sm: 6,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n          label: \"Supplier Category\",\n          name: \"supplier_category\",\n          value: values.supplier_category,\n          onChange: handleInputChange,\n          error: errors.supplier_category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls.Checkbox, {\n          name: \"status\",\n          label: \"Status\",\n          value: values.status == \"0\" ? false : true,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Controls.Button, {\n        type: \"submit\",\n        text: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n        text: \"Reset\",\n        color: \"default\",\n        onClick: resetForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Rowen/Desktop/expo/fscit-nextjs/pages/warehouse-management/supplier-master/SupplierForm.js"],"names":["React","useState","useEffect","Grid","Controls","useForm","Form","initialFValues","id","supplier_code","supplier_name","status","supplier_category","created_by","updated_by","SupplierForm","props","addOrEdit","recordForEdit","validate","fieldValues","values","temp","errors","setErrors","Object","every","x","setValues","handleInputChange","resetForm","handleSubmit","e","preventDefault"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,QAAP,MAAqB,uCAArB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,6BAA9B;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,EAAE,EAAE,EADiB;AAErBC,EAAAA,aAAa,EAAE,EAFM;AAGrBC,EAAAA,aAAa,EAAE,EAHM;AAIrBC,EAAAA,MAAM,EAAE,GAJa;AAKrBC,EAAAA,iBAAiB,EAAE,EALE;AAMrBC,EAAAA,UAAU,EAAE,EANS;AAOrBC,EAAAA,UAAU,EAAE;AAPS,CAAvB;AAUA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA+BF,KAArC;;AACA,QAAMG,QAAQ,GAAG,CAACC,WAAW,GAAGC,MAAf,KAA0B;AACzC,QAAIC,IAAI,qBAAQC,MAAR,CAAR;;AACA,QAAI,mBAAmBH,WAAvB,EACEE,IAAI,CAACb,aAAL,GAAqBW,WAAW,CAACX,aAAZ,GACjB,EADiB,GAEjB,yBAFJ;AAGF,QAAI,mBAAmBW,WAAvB,EACEE,IAAI,CAACZ,aAAL,GAAqBU,WAAW,CAACV,aAAZ,GACjB,EADiB,GAEjB,yBAFJ;AAGF,QAAI,uBAAuBU,WAA3B,EACEE,IAAI,CAACV,iBAAL,GAAyBQ,WAAW,CAACR,iBAAZ,GACrB,EADqB,GAErB,yBAFJ;AAIFY,IAAAA,SAAS,mBACJF,IADI,EAAT;AAIA,QAAIF,WAAW,IAAIC,MAAnB,EAA2B,OAAOI,MAAM,CAACJ,MAAP,CAAcC,IAAd,EAAoBI,KAApB,CAA2BC,CAAD,IAAOA,CAAC,IAAI,EAAtC,CAAP;AAC5B,GApBD;;AAsBA,QAAM;AAAEN,IAAAA,MAAF;AAAUO,IAAAA,SAAV;AAAqBL,IAAAA,MAArB;AAA6BC,IAAAA,SAA7B;AAAwCK,IAAAA,iBAAxC;AAA2DC,IAAAA;AAA3D,MACJzB,OAAO,CAACE,cAAD,EAAiB,IAAjB,EAAuBY,QAAvB,CADT;;AAGA,QAAMY,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAId,QAAQ,EAAZ,EAAgB;AACdF,MAAAA,SAAS,CAACI,MAAD,EAASS,SAAT,CAAT;AACD;AACF,GALD;;AAOA5B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,aAAa,IAAI,IAArB,EACEU,SAAS,mBACJV,aADI,EAAT;AAGH,GALQ,EAKN,CAACA,aAAD,CALM,CAAT;AAOA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEa,YAAhB;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAyB,QAAA,EAAE,EAAE,EAA7B;AAAA,gCACE,QAAC,QAAD,CAAU,KAAV;AACE,UAAA,IAAI,EAAC,eADP;AAEE,UAAA,KAAK,EAAC,eAFR;AAGE,UAAA,KAAK,EAAEV,MAAM,CAACZ,aAHhB;AAIE,UAAA,QAAQ,EAAEoB,iBAJZ;AAKE,UAAA,KAAK,EAAEN,MAAM,CAACd;AALhB;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,QAAD,CAAU,KAAV;AACE,UAAA,IAAI,EAAC,eADP;AAEE,UAAA,KAAK,EAAC,eAFR;AAGE,UAAA,KAAK,EAAEY,MAAM,CAACX,aAHhB;AAIE,UAAA,QAAQ,EAAEmB,iBAJZ;AAKE,UAAA,KAAK,EAAEN,MAAM,CAACb;AALhB;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAyB,QAAA,EAAE,EAAE,EAA7B;AAAA,gCACE,QAAC,QAAD,CAAU,KAAV;AACE,UAAA,KAAK,EAAC,mBADR;AAEE,UAAA,IAAI,EAAC,mBAFP;AAGE,UAAA,KAAK,EAAEW,MAAM,CAACT,iBAHhB;AAIE,UAAA,QAAQ,EAAEiB,iBAJZ;AAKE,UAAA,KAAK,EAAEN,MAAM,CAACX;AALhB;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,QAAD,CAAU,QAAV;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAC,QAFR;AAGE,UAAA,KAAK,EAAES,MAAM,CAACV,MAAP,IAAiB,GAAjB,GAAuB,KAAvB,GAA+B,IAHxC;AAIE,UAAA,QAAQ,EAAEkB;AAJZ;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAmCE;AAAA,8BACE,QAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,IAAI,EAAC,QAAtB;AAA+B,QAAA,IAAI,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,IAAI,EAAC,OAAtB;AAA8B,QAAA,KAAK,EAAC,SAApC;AAA8C,QAAA,OAAO,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAnCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Controls from \"../../../components/controls/Controls\";\r\nimport { useForm, Form } from \"../../../components/useForm\";\r\n\r\nconst initialFValues = {\r\n  id: \"\",\r\n  supplier_code: \"\",\r\n  supplier_name: \"\",\r\n  status: \"0\",\r\n  supplier_category: \"\",\r\n  created_by: \"\",\r\n  updated_by: \"\",\r\n};\r\n\r\nexport default function SupplierForm(props) {\r\n  const { addOrEdit, recordForEdit } = props;\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n    if (\"supplier_code\" in fieldValues)\r\n      temp.supplier_code = fieldValues.supplier_code\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    if (\"supplier_name\" in fieldValues)\r\n      temp.supplier_name = fieldValues.supplier_name\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    if (\"supplier_category\" in fieldValues)\r\n      temp.supplier_category = fieldValues.supplier_category\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues == values) return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const { values, setValues, errors, setErrors, handleInputChange, resetForm } =\r\n    useForm(initialFValues, true, validate);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      addOrEdit(values, resetForm);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (recordForEdit != null)\r\n      setValues({\r\n        ...recordForEdit,\r\n      });\r\n  }, [recordForEdit]);\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Grid container>\r\n        <Grid item lg={6} sm={6} xs={12}>\r\n          <Controls.Input\r\n            name=\"supplier_code\"\r\n            label=\"Supplier Code\"\r\n            value={values.supplier_code}\r\n            onChange={handleInputChange}\r\n            error={errors.supplier_code}\r\n          />\r\n          <Controls.Input\r\n            name=\"supplier_name\"\r\n            label=\"Supplier Name\"\r\n            value={values.supplier_name}\r\n            onChange={handleInputChange}\r\n            error={errors.supplier_name}\r\n          />\r\n        </Grid>\r\n        <Grid item lg={6} sm={6} xs={12}>\r\n          <Controls.Input\r\n            label=\"Supplier Category\"\r\n            name=\"supplier_category\"\r\n            value={values.supplier_category}\r\n            onChange={handleInputChange}\r\n            error={errors.supplier_category}\r\n          />\r\n\r\n          <Controls.Checkbox\r\n            name=\"status\"\r\n            label=\"Status\"\r\n            value={values.status == \"0\" ? false : true}\r\n            onChange={handleInputChange}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <div>\r\n        <Controls.Button type=\"submit\" text=\"Submit\" />\r\n        <Controls.Button text=\"Reset\" color=\"default\" onClick={resetForm} />\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}